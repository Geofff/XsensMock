// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xsens_message.proto

#ifndef PROTOBUF_xsens_5fmessage_2eproto__INCLUDED
#define PROTOBUF_xsens_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace xsens_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_xsens_5fmessage_2eproto();
void protobuf_AssignDesc_xsens_5fmessage_2eproto();
void protobuf_ShutdownFile_xsens_5fmessage_2eproto();

class Xsens_message;

// ===================================================================

class Xsens_message : public ::google::protobuf::Message {
 public:
  Xsens_message();
  virtual ~Xsens_message();

  Xsens_message(const Xsens_message& from);

  inline Xsens_message& operator=(const Xsens_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Xsens_message& default_instance();

  void Swap(Xsens_message* other);

  // implements Message ----------------------------------------------

  Xsens_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Xsens_message& from);
  void MergeFrom(const Xsens_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double yaw = 1;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 1;
  inline double yaw() const;
  inline void set_yaw(double value);

  // optional double pitch = 2;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 2;
  inline double pitch() const;
  inline void set_pitch(double value);

  // optional double roll = 3;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 3;
  inline double roll() const;
  inline void set_roll(double value);

  // optional bool IMU_is_enabled = 4;
  inline bool has_imu_is_enabled() const;
  inline void clear_imu_is_enabled();
  static const int kIMUIsEnabledFieldNumber = 4;
  inline bool imu_is_enabled() const;
  inline void set_imu_is_enabled(bool value);

  // optional double acceleration_x = 5;
  inline bool has_acceleration_x() const;
  inline void clear_acceleration_x();
  static const int kAccelerationXFieldNumber = 5;
  inline double acceleration_x() const;
  inline void set_acceleration_x(double value);

  // optional double acceleration_y = 6;
  inline bool has_acceleration_y() const;
  inline void clear_acceleration_y();
  static const int kAccelerationYFieldNumber = 6;
  inline double acceleration_y() const;
  inline void set_acceleration_y(double value);

  // @@protoc_insertion_point(class_scope:xsens_proto.Xsens_message)
 private:
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_imu_is_enabled();
  inline void clear_has_imu_is_enabled();
  inline void set_has_acceleration_x();
  inline void clear_has_acceleration_x();
  inline void set_has_acceleration_y();
  inline void clear_has_acceleration_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double yaw_;
  double pitch_;
  double roll_;
  double acceleration_x_;
  double acceleration_y_;
  bool imu_is_enabled_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_xsens_5fmessage_2eproto();
  friend void protobuf_AssignDesc_xsens_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_xsens_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Xsens_message* default_instance_;
};
// ===================================================================


// ===================================================================

// Xsens_message

// optional double yaw = 1;
inline bool Xsens_message::has_yaw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Xsens_message::set_has_yaw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Xsens_message::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Xsens_message::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Xsens_message::yaw() const {
  return yaw_;
}
inline void Xsens_message::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
}

// optional double pitch = 2;
inline bool Xsens_message::has_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Xsens_message::set_has_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Xsens_message::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Xsens_message::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Xsens_message::pitch() const {
  return pitch_;
}
inline void Xsens_message::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
}

// optional double roll = 3;
inline bool Xsens_message::has_roll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Xsens_message::set_has_roll() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Xsens_message::clear_has_roll() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Xsens_message::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Xsens_message::roll() const {
  return roll_;
}
inline void Xsens_message::set_roll(double value) {
  set_has_roll();
  roll_ = value;
}

// optional bool IMU_is_enabled = 4;
inline bool Xsens_message::has_imu_is_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Xsens_message::set_has_imu_is_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Xsens_message::clear_has_imu_is_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Xsens_message::clear_imu_is_enabled() {
  imu_is_enabled_ = false;
  clear_has_imu_is_enabled();
}
inline bool Xsens_message::imu_is_enabled() const {
  return imu_is_enabled_;
}
inline void Xsens_message::set_imu_is_enabled(bool value) {
  set_has_imu_is_enabled();
  imu_is_enabled_ = value;
}

// optional double acceleration_x = 5;
inline bool Xsens_message::has_acceleration_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Xsens_message::set_has_acceleration_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Xsens_message::clear_has_acceleration_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Xsens_message::clear_acceleration_x() {
  acceleration_x_ = 0;
  clear_has_acceleration_x();
}
inline double Xsens_message::acceleration_x() const {
  return acceleration_x_;
}
inline void Xsens_message::set_acceleration_x(double value) {
  set_has_acceleration_x();
  acceleration_x_ = value;
}

// optional double acceleration_y = 6;
inline bool Xsens_message::has_acceleration_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Xsens_message::set_has_acceleration_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Xsens_message::clear_has_acceleration_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Xsens_message::clear_acceleration_y() {
  acceleration_y_ = 0;
  clear_has_acceleration_y();
}
inline double Xsens_message::acceleration_y() const {
  return acceleration_y_;
}
inline void Xsens_message::set_acceleration_y(double value) {
  set_has_acceleration_y();
  acceleration_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsens_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xsens_5fmessage_2eproto__INCLUDED
