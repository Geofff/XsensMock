// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xsens_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xsens_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xsens_proto {

namespace {

const ::google::protobuf::Descriptor* Xsens_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Xsens_message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xsens_5fmessage_2eproto() {
  protobuf_AddDesc_xsens_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xsens_message.proto");
  GOOGLE_CHECK(file != NULL);
  Xsens_message_descriptor_ = file->message_type(0);
  static const int Xsens_message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, imu_is_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, acceleration_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, acceleration_y_),
  };
  Xsens_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Xsens_message_descriptor_,
      Xsens_message::default_instance_,
      Xsens_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Xsens_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Xsens_message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xsens_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Xsens_message_descriptor_, &Xsens_message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xsens_5fmessage_2eproto() {
  delete Xsens_message::default_instance_;
  delete Xsens_message_reflection_;
}

void protobuf_AddDesc_xsens_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023xsens_message.proto\022\013xsens_proto\"\201\001\n\rX"
    "sens_message\022\013\n\003yaw\030\001 \001(\001\022\r\n\005pitch\030\002 \001(\001"
    "\022\014\n\004roll\030\003 \001(\001\022\026\n\016IMU_is_enabled\030\004 \001(\010\022\026"
    "\n\016acceleration_x\030\005 \001(\001\022\026\n\016acceleration_y"
    "\030\006 \001(\001", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xsens_message.proto", &protobuf_RegisterTypes);
  Xsens_message::default_instance_ = new Xsens_message();
  Xsens_message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xsens_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xsens_5fmessage_2eproto {
  StaticDescriptorInitializer_xsens_5fmessage_2eproto() {
    protobuf_AddDesc_xsens_5fmessage_2eproto();
  }
} static_descriptor_initializer_xsens_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Xsens_message::kYawFieldNumber;
const int Xsens_message::kPitchFieldNumber;
const int Xsens_message::kRollFieldNumber;
const int Xsens_message::kIMUIsEnabledFieldNumber;
const int Xsens_message::kAccelerationXFieldNumber;
const int Xsens_message::kAccelerationYFieldNumber;
#endif  // !_MSC_VER

Xsens_message::Xsens_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Xsens_message::InitAsDefaultInstance() {
}

Xsens_message::Xsens_message(const Xsens_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Xsens_message::SharedCtor() {
  _cached_size_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  imu_is_enabled_ = false;
  acceleration_x_ = 0;
  acceleration_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Xsens_message::~Xsens_message() {
  SharedDtor();
}

void Xsens_message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Xsens_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Xsens_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Xsens_message_descriptor_;
}

const Xsens_message& Xsens_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xsens_5fmessage_2eproto();
  return *default_instance_;
}

Xsens_message* Xsens_message::default_instance_ = NULL;

Xsens_message* Xsens_message::New() const {
  return new Xsens_message;
}

void Xsens_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yaw_ = 0;
    pitch_ = 0;
    roll_ = 0;
    imu_is_enabled_ = false;
    acceleration_x_ = 0;
    acceleration_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Xsens_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double yaw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_pitch;
        break;
      }

      // optional double pitch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_roll;
        break;
      }

      // optional double roll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IMU_is_enabled;
        break;
      }

      // optional bool IMU_is_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IMU_is_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imu_is_enabled_)));
          set_has_imu_is_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_acceleration_x;
        break;
      }

      // optional double acceleration_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_acceleration_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_x_)));
          set_has_acceleration_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_acceleration_y;
        break;
      }

      // optional double acceleration_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_acceleration_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_y_)));
          set_has_acceleration_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Xsens_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double yaw = 1;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->yaw(), output);
  }

  // optional double pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch(), output);
  }

  // optional double roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->roll(), output);
  }

  // optional bool IMU_is_enabled = 4;
  if (has_imu_is_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->imu_is_enabled(), output);
  }

  // optional double acceleration_x = 5;
  if (has_acceleration_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acceleration_x(), output);
  }

  // optional double acceleration_y = 6;
  if (has_acceleration_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acceleration_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Xsens_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double yaw = 1;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->yaw(), target);
  }

  // optional double pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch(), target);
  }

  // optional double roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->roll(), target);
  }

  // optional bool IMU_is_enabled = 4;
  if (has_imu_is_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->imu_is_enabled(), target);
  }

  // optional double acceleration_x = 5;
  if (has_acceleration_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acceleration_x(), target);
  }

  // optional double acceleration_y = 6;
  if (has_acceleration_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acceleration_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Xsens_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double yaw = 1;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double roll = 3;
    if (has_roll()) {
      total_size += 1 + 8;
    }

    // optional bool IMU_is_enabled = 4;
    if (has_imu_is_enabled()) {
      total_size += 1 + 1;
    }

    // optional double acceleration_x = 5;
    if (has_acceleration_x()) {
      total_size += 1 + 8;
    }

    // optional double acceleration_y = 6;
    if (has_acceleration_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Xsens_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Xsens_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Xsens_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Xsens_message::MergeFrom(const Xsens_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_imu_is_enabled()) {
      set_imu_is_enabled(from.imu_is_enabled());
    }
    if (from.has_acceleration_x()) {
      set_acceleration_x(from.acceleration_x());
    }
    if (from.has_acceleration_y()) {
      set_acceleration_y(from.acceleration_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Xsens_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Xsens_message::CopyFrom(const Xsens_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Xsens_message::IsInitialized() const {

  return true;
}

void Xsens_message::Swap(Xsens_message* other) {
  if (other != this) {
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(imu_is_enabled_, other->imu_is_enabled_);
    std::swap(acceleration_x_, other->acceleration_x_);
    std::swap(acceleration_y_, other->acceleration_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Xsens_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Xsens_message_descriptor_;
  metadata.reflection = Xsens_message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsens_proto

// @@protoc_insertion_point(global_scope)
